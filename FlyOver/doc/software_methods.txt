
FlyOver Software architecture:

The closed-loop animal behavior feedback mechanism is maintained via a series of software components [SEE FIGURE]. The Remote Data Server application first reads the treadmill motion from the FlyFizz apparatus, and emits a stream of treadmill position updates over a TCP connection. The FlyOver application reads this stream of treadmill positions, and uses this information to update the location of the animal in the virtual world. FlyOver presents a visual representation of the scene, updated at a rate of 360 Hz, onto the display screen. FlyOver also emits a stream of behavioral reinforcement parameters, based on the particular experimental configuration, via a serial connection. The behavioral reinforcement parameters are then interpreted by a programmable microcontroller apparatus, which in turn delivers the specified reward or punishment feedback, if any, to the animal.

The FlyOver application is a modified version of the Jovian/MouseoVeR software [CITATION NEEDED] used by other labs at Janelia Research Campus.

Like MouseoVeR, FlyOver is built from several powerful third party free and open source software components. The 3D graphics, in-memory scene model, and callback-oriented rendering loop in FlyOver are implemented using the cross-platfrom open source OpenSceneGraph library (version 3.4), implemented in the C++ programming language. The graphical user interface is implemented using cross-platform open source Qt toolkit (version 4.8), also using C++. The cross-platform build and packaging system is implemented with CMake (version 3.4). FlyOver loads virtual world scene descriptions from files stored using the open Collada file format (version 2.4). These Collada format scene files are manually created by scientists, using the free 3D modeling program Blender (version 2.76 ???).

Within a virtual world definition, FlyOver attributes special meaning to certain scene items, based on a special naming convention. For instance, there are two required scene items named "_camera_block_pm_" and "_start_", representing the virtual animal size and viewpoint, and the initial animal location, respectively. Scene item having names flanked by underscore characters (e.g. "_start_"), are treated as invisible, and are not shown on the video display. Scene item names containing the letter "p" following an underscore (e.g. "item_p"), are treated as impenetrable obstacles, which the animal is prevented from entering. Scene item names containing the letter "z", preceded by an underscore, and followed by an optional number (e.g. "item_z2"), represent locations where positive or negative reinforcement might be delivered. The detailed effects of each of these reinforcement zones can be specified in the FlyOver graphical user interface.

FlyOver differs from the parent Jovian/MouseoVeR software in the following respects:
  * FlyOver incorporates a pallette of location-dependent behavioral reinforcement capabilities. This allows the FlyOver application itself to determine the final reinforcement parameters, thus simplifying the responsibilities of the software running on the programmable microcontroller reinforcement apparatus.
  * In FlyOver, the treadmill motion is directly represented as translational (horizontal) and rotational (heading) motion of the animal in the virtual world (with one exception: the animal motion is not permitted to penetrate the vertical obstacles in the virtual scene). In contrast, in the parent Jovian/MouseoVeR software system, the treadmill motion is incorporated into a full physical mechanistic dynamic simulation. We found this simpler motion system used in FlyOver to be easier to debug and reason about.
  * FlyOver includes an option to display a radially symmetric visual fog effect, as opposed to an axis-aligned fog effect. We added this feature because we were concerned that the animal would be confused in situations where the axis-aligned fog would show or hide distant objects depending on the exact heading direction.
  * FlyOver is distributed as a self-installing executable program, to avoid burdening users with a rather complex software build process.
  * FlyOver uses a human-readable xml configuration file format, enabling easier recording of experimental details, and also enabling off-line adjustment of experimental parameters.
  * FlyOver records various experimental details in the log file header, to help keep track of exactly which parameters were used for a particular experimental run.

The unusually high video refresh rate of 360 Hz is required to overcome the much higher flicker fusion rate of Drosophila, as compared to the rate in humans. This rapid refresh rate is achieved by packing 3 subsequent video frames into the red, green, and blue color channels of a full color frame buffer. The image is displayed using a specially modified 120 Hz video projector, from which the color wheel has been removed. This system thus results in a 360 Hz monochromatic video display.
